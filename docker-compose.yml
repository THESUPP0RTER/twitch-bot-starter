version: '3.8'

services:
  twitch-bot:
    build: .
    container_name: twitch-bot
    working_dir: /app
    environment:
      - NODE_ENV=production
      - USERNAME=${USERNAME}
      - ACCESS_CODE=${ACCESS_CODE}
    restart: unless-stopped
    volumes:
      - logs_data:/app/logs
    networks:
      public_net:
        ipv4_address: 172.18.1.3
      nats_net:
        ipv4_address: 172.18.2.3
    healthcheck:
      test: ['CMD', 'node', '-e', "console.log('Health check passed')"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 40s
  log-viewer:
    image: nginx:alpine
    container_name: twitch-bot-logs
    ports:
      - '8082:8080'
    volumes:
      - logs_data:/usr/share/nginx/html/logs:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - public_net
    depends_on:
      - twitch-bot

  # Optional: Add a database service if needed
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: twitch-bot-db
  #   environment:
  #     POSTGRES_DB: twitch_bot
  #     POSTGRES_USER: bot_user
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - bot-network
  #   restart: unless-stopped

  # Optional: Add Redis for caching
  # redis:
  #   image: redis:7-alpine
  #   container_name: twitch-bot-redis
  #   networks:
  #     - bot-network
  #   restart: unless-stopped
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data

  # Optional: Add monitoring with Prometheus
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: twitch-bot-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   networks:
  #     - bot-network
  #   restart: unless-stopped

networks:
  public_net:
    name: public_net
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.1.0/24
          gateway: 172.18.1.1
  nats_net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.2.0/24
          gateway: 172.18.2.1

volumes:
  logs_data:
# Uncomment if using database/redis services
#   postgres_data:
#   redis_data:
#   prometheus_data:
